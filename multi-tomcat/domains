#!/bin/bash

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

###############################################################################
# Start common functions
###############################################################################

function die_with() {
	echo "$*" >&2
	exit 1
}

function warn() {
	echo "$*" >&2
}

function die_with_usage() {
	echo "$*" >&2
	
	print_usage
	
	exit 1
}

function run_as_tomcat() {
	if [ "$(whoami)" != "$CATALINA_USER" ] ; then
		if [ -n "$SUDO_TO_USER" ] ; then
			sudo -u "$SUDO_TO_USER" "$@"
		else
			"$@"
		fi
	else
		"$@"
	fi
}

# Set the launcher root
LAUNCHER_ROOT=$(cd "$(dirname "$(readlink -f "$0")")"/../ ; pwd)
DIST_FOLDER="$LAUNCHER_ROOT/distribution"

if [ ! -e "$LAUNCHER_ROOT/conf/user" ] ; then
	die_with "No user configured in $LAUNCHER_ROOT/conf/user"
elif [ ! -e "$LAUNCHER_ROOT/conf/java" ] ; then
	die_with "No JVM configured in $LAUNCHER_ROOT/conf/java"
fi

export CATALINA_USER=$(cat "$LAUNCHER_ROOT/conf/user")
export JAVA_HOME=$(cat "$LAUNCHER_ROOT/conf/java")

SUDO_TO_USER=""

if [ "$(whoami)" != "$CATALINA_USER" ] ; then
	# Allow sudo to be disabled for non-root users
	if [ "$(whoami)" != "root" ] ; then
		if [ -e "$LAUNCHER_ROOT/conf/allow-sudo" ] ; then
			case "$(cat "$LAUNCHER_ROOT/conf/allow-sudo")" in
				yes|true|1)
				# Switch to the tomcat user
			SUDO_TO_USER="$CATALINA_USER"
			;;
			no|false|0)
				# Don't switch to the tomcat user. Some commands may fail.
				SUDO_TO_USER=""
				;;
			*)
				die_with "Unknown value in conf/allow-sudo: $(cat "$LAUNCHER_ROOT/conf/allow-sudo")"
				;;
			esac
		fi
	else
		# We are root, switch to the tomcat user
		SUDO_TO_USER="$CATALINA_USER"
	fi
fi

###############################################################################
# End common functions
###############################################################################

function print_usage() {
	echo "Multi-domain tomcat management scripts"
	echo "Copyright (c) 2014-present Peter Wright"
	echo ""

	echo "Usage: "
	echo ""
	echo "CREATING A NEW DOMAIN"
	echo "	$0 create <domainName> --port <portNumber>"
	echo "		This creates a new domain, setting the HTTP port to the specified value. Will fail if a domain with this name already exists."
	echo ""
	echo "ADDING RESOURCES TO A DOMAIN"
	echo "	$0 add-database <domainName>"
	echo "		This displays instructions on how to add a database connection to the specified domain"
	echo ""
	echo "CONTROLLING A DOMAIN"
	echo ""
	echo "	$0 start [<domainName>[,<domainName2>...]]"
	echo "		This starts the domain (killing any previously-running instance)."
	echo ""
	echo "	$0 status [<domainName>[,<domainName2>...]]"
	echo "		This displays whether the domain is running"
	echo ""
	echo "	$0 stop [<domainName>[,<domainName2>...]]"
	echo "		This requests the domain shut down cleanly"
	echo ""
	echo "	$0 restart [<domainName>[,<domainName2>...]]"
	echo "		This restarts the domain (stop and then start)"
	echo ""
	echo "	$0 kill [<domainName>[,<domainName2>...]]"
	echo "		This kills any running instance for this domain"
	echo ""
	echo "	$0 log [<domainName>[,<domainName2>...]]"
	echo "		This executes tail -f on the catalina.out files for each of the listed domains in parallel"
	echo ""
	echo "Full list of supported domain commands, run domain --help"
	echo ""
	echo "Anywhere <domainName> appears, the following special values are permitted:"
	echo "	all      apply the operation to each domain sequentially (default if no domain name is specified)"
	echo "	running  all domains that are running"
	echo "	stopped  all domains that are not running"
}

# Make sure there's a shared folder
if [ ! -e "$LAUNCHER_ROOT/shared" ] ; then

	if [ ! -e "$LAUNCHER_ROOT/distribution" ] ; then
		echo "No distribution folder found in $LAUNCHER_ROOT - please download tomcat >= 8.0 and unpack to ${LAUNCHER_ROOT}/distribution" >&2
		
		exit 100
	fi
	
	run_as_tomcat mkdir "$LAUNCHER_ROOT/shared" || die_with "Failed to create shared folder!"
	run_as_tomcat cp -r "$DIST_FOLDER/lib" "$LAUNCHER_ROOT/shared/lib"
	run_as_tomcat cp -r "$DIST_FOLDER/bin" "$LAUNCHER_ROOT/shared/bin"
	run_as_tomcat mkdir "$LAUNCHER_ROOT/shared/endorsed"
	
	run_as_tomcat rm "$LAUNCHER_ROOT"/shared/bin/*.bat
fi


function domain_create() {
	# Parse command-line options
	while [[ $# != 0 ]]
	do
		key="$1"
		shift

		case $key in
			-n|--name)
				DOMAIN_NAME="$1"
				shift
			
				case $DOMAIN_NAME in
					distribution|shared|bin|lib|endorsed|conf|logs|temp|work|all)
						die_with "Illegal domain name: $DOMAIN_NAME is reserved"
						;;
					*)
						# Looks OK, check that it doesn't conflict with 
						;;
				esac
			;;
			-p|--port)
				DOMAIN_PORT="$1"
				shift
			;;
			*)
				# unknown option
				die_with_usage "Unknown option: $key"
			;;
		esac
	done

	if [ -z "$DOMAIN_NAME" ] ; then
		die_with_usage "Must supply domain name!"
	elif [ -z "$DOMAIN_PORT" ] ; then
		die_with_usage "Must supply domain port!"
	fi

	DOMAIN_FOLDER=$LAUNCHER_ROOT/$DOMAIN_NAME

	run_as_tomcat mkdir "$DOMAIN_FOLDER" || die_with "Failed to create domain folder: $DOMAIN_FOLDER"
	run_as_tomcat ln -rs "$DIST_FOLDER/lib" "$DOMAIN_FOLDER/lib"
	run_as_tomcat cp -r "$DIST_FOLDER/conf" "$DOMAIN_FOLDER/conf"
	run_as_tomcat mkdir "$DOMAIN_FOLDER/bin"
	run_as_tomcat mkdir "$DOMAIN_FOLDER/webapps"
	run_as_tomcat mkdir "$DOMAIN_FOLDER/logs"
	run_as_tomcat mkdir "$DOMAIN_FOLDER/temp"
	run_as_tomcat mkdir "$DOMAIN_FOLDER/work"

	# Add a special file to indicate this is a tomcat domain
	run_as_tomcat dd status=none "of=$DOMAIN_FOLDER/DOMAIN.txt" >/dev/null <<EOF
This is a tomcat domain managed by external scripts. You should not attempt to use this tomcat install directly.
Please refer to the documentation in the parent directory.
EOF

	# Remove the shutdown port and command (use signals instead)
	run_as_tomcat perl -pi -e 's|port=".*?" shutdown=".*?"|port="-1" shutdown="SHUTDOWN"|' "$DOMAIN_FOLDER/conf/server.xml"

	# Remove the AJP connector
	run_as_tomcat perl -pi -e 's|<Connector port=".*?" protocol="AJP/1.3" redirectPort="8443" />||' "$DOMAIN_FOLDER/conf/server.xml"

	# Change the HTTP port
	run_as_tomcat perl -pi -e "s|Connector port=\"8080\" |Connector port=\"${DOMAIN_PORT}\" |" "$DOMAIN_FOLDER/conf/server.xml"
}

# Takes a comma- or space-separated list of aliases, emits a whitespace-separated list of domains (or dies with an error if invalid names were specified)
# The order in which domain names are echoed by this function is undefined, the caller should always sort (and bear in mind that this function may emit duplicates)
function resolve_aliases_raw() {
	local DOMAIN_NAME=""
	
	for DOMAIN_NAME in $(echo "$@" | cut -d',' --output-delimiter ' ' -f1- | paste -s -d' ')
	do
		case $DOMAIN_NAME in
		all)
			# Emit all domains
			runcmd list
		;;
		none)
			# Don't print anything
		;;
		online|running|started)
			for DOM in $(runcmd list)
			do
				local DOMAIN_PID=$("$LAUNCHER_ROOT/bin/domain" -n "$DOM" -c pid)
				
				if [ "$DOMAIN_PID" != "-1" ] ; then
					echo "$DOM"
				fi
			done
		;;
		offline|stopped)
			for DOM in $(runcmd list)
			do
				local DOMAIN_PID=$("$LAUNCHER_ROOT/bin/domain" -n "$DOM" -c pid)
				
				if [ "$DOMAIN_PID" = "-1" ] ; then
					echo "$DOM"
				fi
			done
		;;
		*)
			# Check that this is really a domain
			# If it's not then it might be a user-defined alias
			if [ -e "${LAUNCHER_ROOT}/${DOMAIN_NAME}/DOMAIN.txt" ] ; then
				echo "$DOMAIN_NAME"
			elif [ -f "${LAUNCHER_ROOT}/conf/alias/${DOMAIN_NAME}" ] ; then
				resolve_aliases_raw "$(cat "${LAUNCHER_ROOT}/conf/alias/${DOMAIN_NAME}")"
			elif [ -f "$(echo "${LAUNCHER_ROOT}/${DOMAIN_NAME}"*/DOMAIN.txt)" ] ; then
				basename "$(dirname "${LAUNCHER_ROOT}/${DOMAIN_NAME}"*/DOMAIN.txt)"
			else
				echo "Not a domain name or valid alias/prefix: $DOMAIN_NAME" >&2
				exit 2
			fi
		;;
		esac
	done
}

function resolve_aliases() {
	resolve_aliases_raw "$@" | sort | uniq
}

function domain_action() {
	action="$1"
	shift
	
	DOMAIN_NAMES="$1"
	shift
	
	# If no domain name was specified then we should default to "all"
	if [ -z "$DOMAIN_NAMES" ] ; then
		DOMAIN_NAMES="all"
	fi


	case "$action" in
		log|tclog)
			cd "$LAUNCHER_ROOT" || die_with "Unable to switch to tomcat root"
			
			# Special-case: tail multiple log files simultaneously
			LOG_FILES="$(resolve_aliases "$DOMAIN_NAMES" | perl -pe 's/ /_/g' | perl -pe 's|\n|/logs/catalina.out |g' | perl -pe 's/ $//g')"
			
			if [ -n "$LOG_FILES" ] ; then
				# N.B. do not quote this, we need to allow space-separated values to be expanded to multiple params here
				exec tail -f $LOG_FILES "$@"
			else
				die_with "No domains matched, no logs to tail"
			fi

			;;
		*)
			for DOMAIN_NAME in $(resolve_aliases "$DOMAIN_NAMES")
			do
				# If systemd mode is enabled and we're not inside systemd unit file, call out to systemctl for status/start/stop
				if [[ "$IN_SYSTEMD_UNIT_CTX" != "1" && -e "$LAUNCHER_ROOT/conf/systemd" ]] ; then
					case "$action" in
						status)
							systemctl -n0 --no-pager status "tomcat@${DOMAIN_NAME}" | grep -E --color=never '( tomcat@|(Loaded|Active|PID|Memory): )'
							echo
							continue
							;;
						full-status|fullstatus|systemd-status)
							systemctl status "tomcat@${DOMAIN_NAME}"
							continue
							;;
						start|stop|kill|restart)
							echo "$action $DOMAIN_NAME:"
							sudo systemctl "$action" "tomcat@${DOMAIN_NAME}"
							echo
							continue
							;;
					esac
				fi

				echo -n "$action $DOMAIN_NAME: "
				run_as_tomcat "$LAUNCHER_ROOT/bin/domain" -n "$DOMAIN_NAME" -c "$action" "$@"
			done

			;;
	esac
}


function runcmd() {
	command="$1"
	shift

	case "$command" in
		--help)
			print_usage
			exit 0
		;;
		'')
			die_with_usage "Expected: command"
		;;
		add|create)
			DOMAIN_NAME="$1"
			shift
		
			domain_create -n "$DOMAIN_NAME" "$@"

			if [ -e "$LAUNCHER_ROOT/conf/systemd" ] ; then
				sudo systemctl enable "tomcat@${DOMAIN_NAME}"
			fi
		;;
		relink)
	
			# Intended to be called when shared libraries in shared/ext are changed
			
			# Remove all symlinks in distribution/lib
			run_as_tomcat find "${DIST_FOLDER}/lib" -type l -delete
			
			# Relink all of shared/ext
			if [ -e "$LAUNCHER_ROOT/shared/ext" ] ; then
				run_as_tomcat ln -rs -- "$LAUNCHER_ROOT/shared/ext"/*.jar "$DIST_FOLDER/lib/"
			fi
			
			for DOMAIN_NAME in $(runcmd list)
			do
				if [ -e "$LAUNCHER_ROOT/${DOMAIN_NAME}/DOMAIN.txt" ] ; then
					run_as_tomcat find "$LAUNCHER_ROOT/${DOMAIN_NAME}/lib" -type l -delete
					run_as_tomcat ln -rs -- "$DIST_FOLDER/lib/"* "$LAUNCHER_ROOT/${DOMAIN_NAME}/lib/"
				fi
			done
			
			
			echo 
		;;
		install-cron)
			if [ ! -e /etc/cron.d ] ; then
				die_with "/etc/cron.d not found!"
			fi
			
			echo "Setting up /etc/cron.d/tomcat entry as root..."
			
			sudo dd status=none "of=/etc/cron.d/tomcat" <<EOF
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=
# m	h	dom	mon	dow	user	command
55	23	*	*	*	${CATALINA_USER}	"${LAUNCHER_ROOT}/bin/nightly.sh" "by nightly /etc/cron.d job"
0	3	7	*	*	${CATALINA_USER}	"${LAUNCHER_ROOT}/bin/weekly.sh" "by weekly /etc/cron.d job"
30	23	*	*	*	root	chown -R "${CATALINA_USER}:${CATALINA_USER}" "$LAUNCHER_ROOT"
EOF
		;;
		enable-systemd)
			# Make sure domains are not running
			for RUNNING_DOMAIN in $(runcmd list running)
			do
				runcmd kill "$RUNNING_DOMAIN"
			done

			SERVICE_SCRIPT="/etc/systemd/system/tomcat@.service"

			if [ ! -e "$SERVICE_SCRIPT" ] ; then
				echo "Attempting to elevate to root to install tomcat@.service script..."
				sudo dd status=none "of=$SERVICE_SCRIPT" <<EOF
# Systemd unit file for tomcat domain
# For simple use: once installed, enable for a domain with: systemctl enable tomcat@[domain].service
#
# Alternatively, to model dependencies copy this file as a systemd service and replace %i with the domain name
# In this case, specify the other systemd services that are required first in Requires=

[Unit]
Description=%i tomcat domain
After=syslog.target network.target

# If this tomcat has dependencies on other resources, list them here
#Requires=


[Service]
Type=forking
Restart=on-failure

ExecStart=${LAUNCHER_ROOT}/bin/domains start %i
ExecStop=${LAUNCHER_ROOT}/bin/domains stop %i
ExecReload=${LAUNCHER_ROOT}/bin/domains restart %i
ExecReload=${LAUNCHER_ROOT}/bin/domains restart %i
PIDFile=${LAUNCHER_ROOT}/%i/.pid
Environment=IN_SYSTEMD_UNIT_CTX=1

User=${CATALINA_USER}
Group=${CATALINA_USER}

[Install]
WantedBy=multi-user.target
Alias=%i
EOF
				if [ ! -e "$SERVICE_SCRIPT" ] ; then
					die_with "enable-systemd expects /etc/systemd/system/tomcat@.service"
				fi
			fi

			for DOMAIN_NAME in $(runcmd list)
			do
				sudo systemctl enable "tomcat@${DOMAIN_NAME}"
			done

			# Record that systemd is enabled
			echo 1 | run_as_tomcat dd status=none "of=$LAUNCHER_ROOT/conf/systemd"
		;;
		install)
			echo "Linking domains script into /usr/bin..."
			
			ln -s "${LAUNCHER_ROOT}/bin/domains" /usr/bin/domains
		;;
		startlog)
			domain_action "start" "$@"
			domain_action "log" "$@"
		;;
		list)
			if [ -z "$1" ] ; then
				for f in "$LAUNCHER_ROOT"/*
				do
					if [ -d "$f" ] ; then
						if [ -e "${f}/DOMAIN.txt" ] ; then
							basename "$f"
						fi
					fi
				done
			else
				# Print all the matching domains
				resolve_aliases "$1"
			fi
		;;
		*)
			# Assume the comamnd 
			domain_action "$command" "$@"
		;;
	esac
}

runcmd "$@"
